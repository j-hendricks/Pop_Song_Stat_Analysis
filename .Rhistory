2+2
3+3+3
x <- 9
y <- 10
x+y
?mean
help.search('object')
help.search('str')
help.search('weighted mean')
help(package = 'dplyr')
str(iris)
str(data.frame)
str(matrix)
class(matrix)
class(object)
class(mean)
class(2)
class(2.0)
x <- c(1,2,3)
y <- c(1,1,1)
x +y
x[1:3]
c(2:6)
c(1:11)
c(1:10, by=0.1)
seq(1:10, by=0.5)
seq(2,3, by=0.1)
rep(1:3, times 2)
rep(1:3, times=2)
rep(1:10, each=4)
vec1 <- c(8,2,1,9)
sort(vec1)
vec1
table(vec1)
vec2 <- c(2,2,2,1,4,4)
table(vec2)
rev(vec1)
unique(vec2)
unique(vec1)
vec1[4]
vec2[-1]
vec1[1,3]
vec1[1:3]
vec2[-2:4]
vec2(-(2:4))
vec2[-(2:4)]
vec2[c(4,6)]
vec2[c(1,3)]
vec3 <- c(1:10)
vec3[x==3]
vec <- c(1,2,3)
vec3[vec3==3]
vec3[vec3==100]
vec[x<0]
vec[x>0]
vec <- c(1,2,3,4)
vec[vec==1]
vec <- c(1,1,2,2,3,4)
vec[vec==1]
vec[vec==2]
vec[x %in% c(1,4)]
x <- c(1,2,5)
x[x %in% c(1,2,5)]
vec[vec=c(1,2,3)]
x <- c('a','b','c')
x['a']
x[1]
x[2,3]
x[3]
name(x)
for (i in 1:10){}
a
for (i in 1:10){x}
for (i in 1:10){print(i)}
if(TRUE){print('4')} else{print(3)}
while(TRUE){print('hi')}
add_stuff <- function(num1, num2){}
add_stuff <- function(num1, num2){return num1 + num2}
add_stuff <- function(num1, num2){sum <- num1 + num2  return sum}
add_stuff <- function(num1, num2){sum <- num1 + num2  return(sum)}
View(add_stuff)
add_stuff <- function(x){                                        sum <- x+x                                                       return(sum)            }
View(add_stuff)
> add_stuff <- function(x){                                                                                                             sum <- x+x                                                         return(sum)                                                  }
x < c(1:10)
x <- c(1:10)
x
x = matrix(x, nrow = 2, ncol=5)
x
x[2,3:5]
x[1,3]
t(x)
x
t(t(x))
x %*% x
solve(2,2)
solve(4,2)
solve(x,2)
l <- list(a=1,b=2,c=3)
l
l[1:2]
?cbind()
cbind(1,2)
cbind(1,2,3,c(1,2,3))
cbind(1,2,3,c(7,4,5))
df <- data.frame(a = c('a','b'), b= c(1,2))
df
df[1]
df[2]
colmeans(df)
colMeans(df)
vec <- (1,2,3,4,5)
vec <- c(1,2,3,4,5)
names(vec) <- c(1,2,3,4,5)
vec
names(vec) <- c('a','b','c','d','e')
ve
vec
sum(vec)
mean(vec)
min(vec)
mode(vec)
add(vec)
vec(c(1,4))
vec[c(1,4)]
tion 'add_stuff' not found
# in namespace '.GlobalEnv'
# ERROR: Definition of function 'add_stuff' not found
# in namespace '.GlobalEnv'
x
4
15+10
12/6
.7 * 5
(2*2)+1
sqrt(4)
4^2
sqrt(5^2)
value <- 22
value
value / 2
value<-22/7
value
value <- 4*2.5
value
a.value<-22/7
a.value
a.value.1<-22/10
a.value.1
3doesnotwork<-6
3doesnotwork
3doesnotwork<-6
a3doeswork<-6
a3doeswork
a.value.2<-4.4
a.value.2/a.value.1
Item1 <- c(1,3,2,2,4)
Item1
Item1 + 2
Item2 <- c(1,1,1,2,1)
Item2*0
Item3 <- c(5,4,5,5,3)
(Item3 + 1)/2
Item1 + Item2
Item2 * Item3
Item1 / Item2
vector1 <- c(1,2,3,4,5)
vector2 <- c(1,2,3)
vector1 + vector2
MeanResponse <- (Item1 + Item2 + Item3)/3
meanResponse
MeanResponse
2:10
-4:6
-1:-11
1:1
1:100
2:10
1:3
-4:6
5:1
-1:-11
ID <- c(1:5)
ID
?sd
Age <- c(18,19,19,21,21,21,21,22,22,22,23,24,24,25,27)
sd(x=Age, na.rm=FALSE)
sd(x=Age)
Age <- c(18,19,19,21,21,21,21,22,22,22,23,24,24,25,27,NA,NA)
sd(x=Age, na.rm=FALSE) # This will return "NA"
sd(x=Age)              # So will this!
sd(x=Age, na.rm=TRUE)  # This is the way we want to do it
sd(Age, na.rm=TRUE)
sd(x=Age, na.rm=FALSE)
sd(Age)
sd(x=Age, na.rm=TRUE)
sd(Age, na.rm=TRUE)
sd(na.rm=TRUE, x=Age)
?c
x <- c(c(1,2), c(2,3), c(3,4))
x[1]
x[1[1]]
x[1[1:2]]
mean(Age) # Remember, there are two NAs here...
mean(Age, na.rm=TRUE)
install.packages("psych")
library(psych)
describe(Age)
summary(Age)
?psych
getwd()
((10*6-21/3+17)*(4-18/(3*3)))%%6
# Now run the next few lines (lines 20-23).
w <- 7
x <- 522
y <- 18
z <- 29
# What is w*y?
w*y
# What is y*z?
y*z
# What does R return when running the code "x > y*z"?  Is x greater than y*z?
x > y*z
# What does R return when running the code "x == y*z"?  Is x equal to y*z?
x == y*z
# What is the output of prod(w, y)?
prod(w, y)
#  What does R return when running the code "w*y == prod(w, y)"?  Are w*y and prod(w,y) equal?
w*y == prod(w, y)
#  What does R return when running the code "y*z == prod(w, y)"?  Are y*z and prod(w,y) equal?
y*z == prod(w, y)
prod(1,2)
?prod()
?prod(1,NA, 2)
?prod(1,NA, 2, na.rm = TRUE)
# Good job!  Now, let's look at some data.  Run the two lines below.
data(mtcars)
carData <- mtcars[, c("mpg", "cyl", "hp")]
mtcars
carData <- mtcars[, c("mpg", "cyl", "hp")]
carData
# To do this, we use the head() function.
head(carData)
# How many rows of data do we have?
nrow(carData)
mean(carData$hp)
# If the psych package is not installed run the line below without the "#"
install.packages("psych")
library(psych)
# And now run this line of code to look at all of the statistics for the entire dataset.
describe(carData)
((10*6-21/3+17)*(4-18/(3*3)))%%6
# Now run the next few lines (lines 20-23).
w <- 7
x <- 522
y <- 18
z <- 29
# What is w*y?
w*y
# What is y*z?
y*z
# What does R return when running the code "x > y*z"?  Is x greater than y*z?
x > y*z
# What does R return when running the code "x > y*z"?  Is x greater than y*z?
x > y*z
# What does R return when running the code "x == y*z"?  Is x equal to y*z?
x == y*z
# What is the output of prod(w, y)?
prod(w, y)
18*7
#  What does R return when running the code "w*y == prod(w, y)"?  Are w*y and prod(w,y) equal?
w*y == prod(w, y)
#  What does R return when running the code "y*z == prod(w, y)"?  Are y*z and prod(w,y) equal?
y*z == prod(w, y)
# What does R return when running the code "x*z == prod(x, z)"?  Are x*z and prod(x,z) equal?
x*z == prod(x, z)
# Good job!  Now, let's look at some data.  Run the two lines below.
data(mtcars)
carData <- mtcars[, c("mpg", "cyl", "hp")]
# Now, let's do some statistics.  Normally we begin by looking at the data, to see what it looks like.
# Run the line below to do this.
carData
nrow(carData)
# How many rows of data do we have?
nrow(carData)
# What is the mean horsepower (hp) for all of the cars?
mean(carData$hp)
# And now run this line of code to look at all of the statistics for the entire dataset.
describe(carData)
library(psych)
# And now run this line of code to look at all of the statistics for the entire dataset.
describe(carData)
# If the psych package is not installed run the line below without the "#"
install.packages("psych")
library(psych)
# And now run this line of code to look at all of the statistics for the entire dataset.
describe(carData)
prod(w,y)
y*z == prod(w,y)
x == y*z
y*z
w*y
((10*6-21/3+17)*(4-18/(3*3)))%%6
getwd()
setwd("C:/Users/johnwhendricks/Documents")
install.packages("tidyverse")
results <- prop.test(c(13, 14475) , c(22, 26987))
results
setwd("~/Desktop/classFolder/Pop_Song_Stat_Analysis")
df <- read.csv("songs_normalize.csv")
df
df <- read.csv("songs_normalize.csv", stringsAsFactors = F)
lin_reg = lm(popularity ~ duration_ms + danceability + energy + loudness + speechiness + accousticness + instrumentalness + liveness + valence + tempo)
lin_reg = lm(df$popularity ~ df$duration_ms + df$danceability + df$energy + df$loudness + df$speechiness + df$accousticness + df$instrumentalness + df$liveness + df$valence + df$tempo)
print(is.na(df))
print(is.na(df$acousticness))
print(sum(is.na(df)))
print(sum(is.na(df$acousticness)))
print(sum(is.null(df$acousticness)))
print(is.na(df))
print(any(is.na(df,)))
print(any(is.na(df)))
lin_reg = lm(df$popularity ~ df$duration_ms + df$danceability + df$energy + df$loudness + df$speechiness + df$acousticness + df$instrumentalness + df$liveness + df$valence + df$tempo)
result <- summary(lin_reg)
print(result)
lin_reg2 <- lm(df$popularity ~ df$duration_ms + df$loudness)
result2 <- summary(lin_reg2)
print(result2)
df
lin_reg = lm(df$popularity ~ df$duration_ms + df$danceability + df$energy
+ df$loudness + df$speechiness + df$acousticness + df$instrumentalness
+ df$liveness + df$valence + df$tempo + df$key + df$year)
result <- summary(lin_reg)
print(result)
lin_reg2 <- lm(df$popularity ~ df$duration_ms + df$loudness)
result2 <- summary(lin_reg2)
print(result2)
print(cor(df, method = c("pearson")))
print(cor(select(df, popularity, duration_ms,danceability), method = c("pearson")))
library(dplyr)
print(cor(select(df, popularity), method = c("pearson")))
df
print(cor(select(df, -genre, -mode, -key, -song, -artist), method = c("pearson")))
print(cor(select(df, -df$genre, -df$mode, -df$key, -df$song, -df$artist), method = c("pearson")))
print(cor(select(df, -genre, -mode, -key, -song, -artist, -explicit), method = c("pearson")))
result3 <- summary(lin_reg3)
lin_reg3 <- lm(df$popularity ~ df$duration_ms + df$energy)
result3 <- summary(lin_reg3)
print(result3)
lin_reg = lm(df$popularity ~ df$duration_ms + df$danceability + df$energy
+ df$speechiness + df$acousticness + df$instrumentalness
+ df$liveness + df$valence + df$tempo + df$key + df$year)
result <- summary(lin_reg)
print(result)
